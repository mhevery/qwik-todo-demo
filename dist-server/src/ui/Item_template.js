"use strict";
/**
 * @license
 * Copyright BuilderIO All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/BuilderIO/qwik/blob/main/LICENSE
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports._needed_by_JSX_ = void 0;
const qwik_js_1 = require("../qwik.js");
const Item_component_js_1 = require("./Item_component.js");
// TODO: remove this by changing jsxFactory over to import
exports._needed_by_JSX_ = qwik_js_1.jsxFactory; // eslint-disable-line @typescript-eslint/no-unused-vars
exports.default = qwik_js_1.injectMethod(Item_component_js_1.ItemComponent, qwik_js_1.provideEntityState(qwik_js_1.provideComponentProp('$item') // TODO(type)
), qwik_js_1.provideComponentProp('$item'), function (item, itemKey) {
    return (qwik_js_1.jsxFactory(qwik_js_1.Host, { class: { completed: item.completed, editing: this.editing } },
        qwik_js_1.jsxFactory("div", { class: "view" },
            qwik_js_1.jsxFactory("input", { class: "toggle", type: "checkbox", checked: item.completed, "on:click": qwik_js_1.QRL `ui:/Item_toggle#?toggleState=.target.checked` }),
            qwik_js_1.jsxFactory("label", { "on:dblclick": qwik_js_1.QRL `ui:/Item_edit#begin` }, item.title),
            qwik_js_1.jsxFactory("button", { class: "destroy", "on:click": qwik_js_1.QRL `ui:/Item_remove#?itemKey=${itemKey}` })),
        this.editing ? (qwik_js_1.jsxFactory("input", { class: "edit", value: item.title, "on:blur": qwik_js_1.QRL `ui:/Item_edit#end`, "on:keyup": qwik_js_1.QRL `ui:/Item_edit#change?value=.target.value&code=.code&itemKey=${itemKey}` })) : null));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSXRlbV90ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsic3JjL3VpL0l0ZW1fdGVtcGxhdGUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7OztBQUdILHdDQVNvQjtBQUNwQiwyREFBb0Q7QUFFcEQsMERBQTBEO0FBQzdDLFFBQUEsZUFBZSxHQUFHLG9CQUFVLENBQUMsQ0FBQyx3REFBd0Q7QUFDbkcsa0JBQWUsc0JBQVksQ0FDekIsaUNBQWEsRUFDYiw0QkFBa0IsQ0FDaEIsOEJBQW9CLENBQUMsT0FBTyxDQUEyQyxDQUFDLGFBQWE7Q0FDdEYsRUFDRCw4QkFBb0IsQ0FBQyxPQUFPLENBQUMsRUFDN0IsVUFBK0IsSUFBVSxFQUFFLE9BQWU7SUFDeEQsT0FBTyxDQUNMLHFCQUFDLGNBQUksSUFBQyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUMvRCw4QkFBSyxLQUFLLEVBQUMsTUFBTTtZQUNmLGdDQUNFLEtBQUssRUFBQyxRQUFRLEVBQ2QsSUFBSSxFQUFDLFVBQVUsRUFDZixPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsY0FDYixhQUFHLENBQUEsOENBQThDLEdBQzNEO1lBQ0YsK0NBQW9CLGFBQUcsQ0FBQSxxQkFBcUIsSUFBRyxJQUFJLENBQUMsS0FBSyxDQUFTO1lBQ2xFLGlDQUFRLEtBQUssRUFBQyxTQUFTLGNBQVcsYUFBRyxDQUFBLDRCQUE0QixPQUFPLEVBQUUsR0FBVyxDQUNqRjtRQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQ2QsZ0NBQ0UsS0FBSyxFQUFDLE1BQU0sRUFDWixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssYUFDUixhQUFHLENBQUEsbUJBQW1CLGNBQ3JCLGFBQUcsQ0FBQSwrREFBK0QsT0FBTyxFQUFFLEdBQ3JGLENBQ0gsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNILENBQ1IsQ0FBQztBQUNKLENBQUMsQ0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEJ1aWxkZXJJTyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9CdWlsZGVySU8vcXdpay9ibG9iL21haW4vTElDRU5TRVxuICovXG5cbmltcG9ydCB7IEl0ZW0sIEl0ZW1FbnRpdHkgfSBmcm9tICcuLi9kYXRhL0l0ZW0uanMnO1xuaW1wb3J0IHtcbiAgaW5qZWN0TWV0aG9kLFxuICBqc3hGYWN0b3J5LFxuICBwcm92aWRlQ29tcG9uZW50UHJvcCxcbiAgcHJvdmlkZUVudGl0eVN0YXRlLFxuICBRUkwsXG4gIEVudGl0eUtleSxcbiAgUHJvdmlkZXIsXG4gIEhvc3QsXG59IGZyb20gJy4uL3F3aWsuanMnO1xuaW1wb3J0IHsgSXRlbUNvbXBvbmVudCB9IGZyb20gJy4vSXRlbV9jb21wb25lbnQuanMnO1xuXG4vLyBUT0RPOiByZW1vdmUgdGhpcyBieSBjaGFuZ2luZyBqc3hGYWN0b3J5IG92ZXIgdG8gaW1wb3J0XG5leHBvcnQgY29uc3QgX25lZWRlZF9ieV9KU1hfID0ganN4RmFjdG9yeTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmV4cG9ydCBkZWZhdWx0IGluamVjdE1ldGhvZChcbiAgSXRlbUNvbXBvbmVudCxcbiAgcHJvdmlkZUVudGl0eVN0YXRlPEl0ZW1FbnRpdHk+KFxuICAgIHByb3ZpZGVDb21wb25lbnRQcm9wKCckaXRlbScpIGFzIGFueSBhcyBQcm92aWRlcjxFbnRpdHlLZXk8SXRlbUVudGl0eT4+IC8vIFRPRE8odHlwZSlcbiAgKSxcbiAgcHJvdmlkZUNvbXBvbmVudFByb3AoJyRpdGVtJyksXG4gIGZ1bmN0aW9uICh0aGlzOiBJdGVtQ29tcG9uZW50LCBpdGVtOiBJdGVtLCBpdGVtS2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEhvc3QgY2xhc3M9e3sgY29tcGxldGVkOiBpdGVtLmNvbXBsZXRlZCwgZWRpdGluZzogdGhpcy5lZGl0aW5nIH19PlxuICAgICAgICA8ZGl2IGNsYXNzPVwidmlld1wiPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgY2xhc3M9XCJ0b2dnbGVcIlxuICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgIGNoZWNrZWQ9e2l0ZW0uY29tcGxldGVkfVxuICAgICAgICAgICAgb246Y2xpY2s9e1FSTGB1aTovSXRlbV90b2dnbGUjP3RvZ2dsZVN0YXRlPS50YXJnZXQuY2hlY2tlZGB9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8bGFiZWwgb246ZGJsY2xpY2s9e1FSTGB1aTovSXRlbV9lZGl0I2JlZ2luYH0+e2l0ZW0udGl0bGV9PC9sYWJlbD5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZGVzdHJveVwiIG9uOmNsaWNrPXtRUkxgdWk6L0l0ZW1fcmVtb3ZlIz9pdGVtS2V5PSR7aXRlbUtleX1gfT48L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHt0aGlzLmVkaXRpbmcgPyAoXG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICBjbGFzcz1cImVkaXRcIlxuICAgICAgICAgICAgdmFsdWU9e2l0ZW0udGl0bGV9XG4gICAgICAgICAgICBvbjpibHVyPXtRUkxgdWk6L0l0ZW1fZWRpdCNlbmRgfSAvLyBUT0RPOiBpbnZlc3RpZ2F0ZSB3aHkgdGhpcyBzb21ldGltZXMgZG9lcyBub3QgZmlyZVxuICAgICAgICAgICAgb246a2V5dXA9e1FSTGB1aTovSXRlbV9lZGl0I2NoYW5nZT92YWx1ZT0udGFyZ2V0LnZhbHVlJmNvZGU9LmNvZGUmaXRlbUtleT0ke2l0ZW1LZXl9YH1cbiAgICAgICAgICAvPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvSG9zdD5cbiAgICApO1xuICB9XG4pO1xuIl19