/**
 * @license
 * Copyright BuilderIO All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/BuilderIO/qwik/blob/main/LICENSE
 */
/* eslint no-console: ["off"] */
import commander from 'commander';
import domino from 'domino';
import express from 'express';
import * as fs from 'fs';
import { join } from 'path';
import srcMap from 'source-map-support';
import { serializeState } from '@builder.io/qwik';
import { findFiles } from './fs_util.js';
srcMap.install();
async function main(__dirname, process) {
    console.log('===================================================');
    console.log('Starting:', __dirname);
    console.log('Node Version:', process.version);
    const program = commander.program;
    program
        .version('0.0.1')
        .option('-p --port <port>', 'HTTP port to serve from', parseInt, 8080)
        .option('-r --root <path...>', 'List of roots to serve from', []);
    program.parse(process.argv);
    const opts = program.opts();
    console.log(opts);
    const app = express();
    const RUNFILES = process.env.RUNFILES || '';
    console.log('RUNFILES', RUNFILES);
    app.use((req, res, next) => {
        if (req.path.endsWith('/qwik.js') && req.path !== '/qwik.js') {
            res.type('application/javascript');
            if (qwikBundle) {
                res.write(qwikBundle);
            }
            else {
                res.write("export * from '/qwik.js';");
            }
            res.end();
        }
        else {
            next();
        }
    });
    // Set up static routes first
    const servePaths = opts.root.map((servePath) => join(RUNFILES, servePath));
    const qwikBundle = readBundleContent(servePaths);
    servePaths.forEach((path) => {
        if (fs.existsSync(path)) {
            console.log('Serve static:', path);
            app.use('/', express.static(path));
        }
        else {
            console.log('REJECTING:', path);
        }
    });
    const serverIndexJS = [];
    opts.root.forEach(root => {
        findFiles(join(RUNFILES, root), 'server_index.js', (fullPath, fileName, relativePath) => {
            console.log('Found: ', fileName, relativePath, fullPath);
            serverIndexJS.push({ url: relativePath, path: fullPath });
        });
    });
    // Now search for `server.js`
    await Promise.all(serverIndexJS.map(async (indexJS) => {
        console.log('Importing: ', indexJS.path);
        const serverMain = (await import(indexJS.path)).serverMain;
        const baseURI = `file://${indexJS.path}`;
        app.use('/' + indexJS.url, createServerJSHandler(serverMain, baseURI));
    }));
    app.listen(opts.port);
}
function readBundleContent(paths) {
    for (let i = 0; i < paths.length; i++) {
        const path = paths[i];
        const qwikPath = join(path, 'qwik.js');
        const content = fs.readFileSync(qwikPath);
        if (content.length) {
            console.log('Found Qwik bundle:', qwikPath);
            return String(content);
        }
    }
    return null;
}
function createServerJSHandler(serverMain, baseUri) {
    return async function serverJSHandler(req, res) {
        const document = domino.createDocument();
        Object.defineProperty(document, 'baseURI', { value: baseUri });
        Object.defineProperty(document, 'URL', {
            value: `${req.protocol}://${req.headers.host}${req.originalUrl}`
        });
        const roots = await serverMain(document, req.url);
        if (!Array.isArray(roots)) {
            throw new Error(`SERVER: Render method of '${req.url}' should have returned a promise which resolves when DOM is ready for serialization.`);
        }
        serializeState(document);
        const html = document.querySelector('html');
        res.send(html.outerHTML);
    };
}
main(__dirname, process).then(() => {
    console.log('Serving ...');
});
//# sourceMappingURL=data:application/json;base64,